import java.awt.*;
import java.util.*;

public class SyncedForms {
 public static Scanner scnr = new Scanner(System.in);
  
  public static void main(String[] args) { //Main method that calls drawSyncedForms
    drawSyncedForms();
     
  }
  
 
  public static void drawSyncedForms(){    //drawSyncedForms gets input from the user (shape of form, # of forms,# of moves), calls moveForms initialColor and initialPosition, then outputs the signature print at the end

    int[] xPositions = new int [9];
    int[] yPositions = new int [9];
    Color[] colors = new Color [9]; 
    char shapeOp; 
    int numForms;
    int numMoves;
    DrawingPanel panel = new DrawingPanel(400, 400);
  
    System.out.print("What form will be shown (C-Circle, S-Square)?");
    shapeOp = scnr.next().charAt(0); 
    
    System.out.println();
    
    System.out.print("How many forms do you want to show (max 9)? ");
    numForms = scnr.nextInt();
    
    System.out.println();
  
    System.out.print("How many times you want the forms to move (max 500)? ");
    numMoves = scnr.nextInt(); 
    
     System.out.println();
    
     initialPosition( xPositions,yPositions, numForms);
     initialColor(colors, numForms);
     
     System.out.print("Input the different moves"); 
     
     moveForms( panel, shapeOp,xPositions,yPositions, colors, numForms, numMoves);
     
     Graphics mypen = panel.getGraphics();
     mypen.setColor(Color.GREEN);
     mypen.drawRect(20,180,360,40);
     mypen.setColor(Color.BLACK);
     mypen.fillRect(20,180,360,40);
     mypen.setColor(Color.GREEN);
     mypen.drawString("UTSA â€“ Spring 2023 - CS1083 - Section 005 - Project 3 -",25,195);
     mypen.setColor(Color.GREEN);
     mypen.drawString("SyncedForms - written by Allison Martin",25,215);   
  }
  
  public static void initialPosition(int[] xPositions,int[] yPositions,int numForms){   //initialPosition method creates the x and y coordinates for the initial position from figure 3

     for (int i =0;i<= numForms;i++){
       
         switch (i){                                          // switch statement that calls a certain coordinate points of x and y that are chosen dependant on the number of forms chosen by the user 
           case 0:
            xPositions [0]= 75;  //first circle (1)
            yPositions [0]= 75;  //first circle (1)
            break;
           case 1:
             xPositions [1]= 275;  //third circle (2)
             yPositions [1]= 75;  //third circle (2)
            break;
           case 2:
             xPositions [2]= 275;  //9th circle (3)
              yPositions [2]= 275;  //9th circle (3)
             break;
           case 3:
             xPositions [3]= 75;  //seventh circle (4) 
             yPositions [3]= 275;  //seventh circle (4)
             break;
           case 4:
             xPositions [4]= 175;  //fifth circle (5)
             yPositions [4]= 175;  //fifth circle (5)
             break;
           case 5:
             xPositions [5]= 75;  //fourth circle (6)
             yPositions [5]= 175;  //fourth circle (6)
             break;
           case 6:
             xPositions [6]= 275;  //sixth circle (7)
             yPositions [6]= 175;  //sixth circle (7)
             break;
           case 7:
             xPositions [7]= 175;  //second circle (8)
             yPositions [7]= 75;  //second circle (8)
             break;
           case 8:
              xPositions [8]= 175;  //8th circle (9)
              yPositions [8]= 275;  //8th circle (9)
             break;
  }
     }
  } 
  
  
  public static void initialColor (Color[] colors, int numForms ){      // initialColor method that adds color to the shapes of the coordinates to the shapes that are going to correspond together based on the number of forms.

    for (int i =0; i<=numForms;i++){
      switch (i){                          // switch statement that calls a certain color based on the number of forms also chosen by the user
        case 0:
     colors [0]= Color.GREEN;
     break;
        case 1:
     colors [1]= Color.GRAY;
     break;
        case 2:
     colors [2]= Color.YELLOW;
     break;
        case 3:
     colors [3]= Color.RED;
     break;
        case 4:
     colors [4]= Color.ORANGE;
     break;
        case 5:
     colors [5]= Color.PINK;
     break;
        case 6:
     colors [6]= Color.DARK_GRAY ;
     break;
        case 7: 
     colors [7]= Color.BLUE;
     break;
        case 8:
     colors [8]= Color.BLACK;
     break;
  
    }
   }
  } 
  
  public static void moveForms (DrawingPanel panel,char shapeOp,int[] xPositions,int[] yPositions,Color[] colors, int numForms,int numMoves ){  //moveForms method uses for loops to call other methods like showForm and moveForm
    
    int size=50;
     Graphics mypen = panel.getGraphics();
     for (int i=0; i<numForms;i++){                                                // for loop that calls showForm    
      showForm( mypen,shapeOp,xPositions[i] ,yPositions[i] , colors[i], size);
} 
  
  

  for (int i=0;i<numMoves;i++){                                                     //Nested loops that asks the user to input there moves using (orient) and also calls showForm and moveForm  and also has the panel sleep for 50 milsecs each move 
    int orient = scnr.nextInt();
    for (int j=0;j<numForms;j++){
       moveForm(xPositions,yPositions,j,orient);
       showForm(mypen, shapeOp, xPositions[j], yPositions[j], colors[j], size);       
    } 
    panel.sleep(50); 
  }
}
    

  
  public static void moveForm(int[] xPositions,int[] yPositions, int formIndex, int orient){ //moveForm method is the function that adds to the x and y coordinates to add the direction of the new shape over the previous shape using figure 5 to move in the specified direction
    
      switch (orient){                                          //switch statement that directs to the correct position direction by using the user input from orient

        case 0:
          yPositions[formIndex] = yPositions[formIndex] - 25;
          break;
        case 1:
          yPositions[formIndex] = yPositions[formIndex] - 25;
          xPositions[formIndex] = xPositions[formIndex] + 25;
          break;
        case 2:
          xPositions[formIndex] = xPositions[formIndex] + 25;          
          break;
        case 3:
          xPositions[formIndex] = xPositions[formIndex] + 25;          
          yPositions[formIndex] = yPositions[formIndex] + 25;
          break;
        case 4:
          yPositions[formIndex] = yPositions[formIndex] + 25;          
          break;
        case 5:
          yPositions[formIndex] = yPositions[formIndex] + 25;
          xPositions[formIndex] = xPositions[formIndex] - 25;
          break;
        case 6:
          xPositions[formIndex] = xPositions[formIndex] - 25;        
          break;
        case 7:
          xPositions[formIndex] = xPositions[formIndex] - 25;
          yPositions[formIndex] = yPositions[formIndex] - 25;
          break;
      } 
    
      }
  
  public static void showForm (Graphics mypen, char formType, int x,int y, Color color, int size){ // showForm method that outlines and fills the shapes that are supposed to be drawn

    
      if (formType=='C'){
         mypen.setColor(Color.BLACK);
         mypen.drawOval(x,y,size,size);
         mypen.setColor(color);
         mypen.fillOval(x,y,size,size);}
      if (formType=='S') {
         mypen.setColor(Color.BLACK);
         mypen.drawRect(x,y,size,size);
         mypen.setColor(color);
         mypen.fillRect(x,y,size,size);}
  
 
    
      }
    
  }
  

  
